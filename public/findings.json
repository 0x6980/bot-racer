[
    {
        "Hound": "Event is missing msg.sender parameter",
        "IllIllI": "Events are missing sender information"
    },
    {
        "Hound": "Variable initialization with default value",
        "IllIllI": "Variables need not be initialized to zero"
    },
    {
        "Hound": "Use named mappings to improve code readability",
        "IllIllI": "Consider using named mappings"
    },
    {
        "Hound": "Some functions don't follow the Solidity naming conventions",
        "IllIllI": "Non-external/public variable and function names should begin with an underscore"
    },
    {
        "Hound": "Missing/malformed underscores for large numeric literals",
        "IllIllI": "Large numeric literals should use underscores for readability"
    },
    {
        "Hound": "Constants in comparisons should appear on the left side",
        "IllIllI": "Constants in comparisons should appear on the left side"
    },
    {
        "Hound": "Consider disabling renounceOwnership",
        "IllIllI": "Consider disabling renounceOwnership()"
    },
    {
        "Hound": "else block is not required",
        "IllIllI": "else-block not required"
    },
    {
        "Hound": "Declare interfaces on separate files",
        "IllIllI": "Interfaces should be defined in separate files from their usage"
    },
    {
        "Hound": "Imports should be organized more systematically",
        "IllIllI": "Imports could be organized more systematically"
    },
    {
        "Hound": "Mixed usage of int/uint with int256/uint256",
        "IllIllI": "Mixed usage of int/uint with int256/uint256"
    },
    {
        "Hound": "Public functions not called internally",
        "IllIllI": "public functions not called by the contract should be declared external instead"
    },
    {
        "Hound": "Use of non-named numeric constants",
        "IllIllI": "constants should be defined rather than using magic numbers"
    },
    {
        "Hound": "Event does not have proper indexed fields",
        "IllIllI": "Event is not properly indexed"
    },
    {
        "Hound": "Duplicated require/if statements should be refactored",
        "IllIllI": "Duplicated require()/revert() checks should be refactored to a modifier or function"
    },
    {
        "Hound": "Lack of specific import identifier",
        "IllIllI": "Import declarations should import specific identifiers, rather than the whole file"
    },
    {
        "IllIllI": "Contract implements interface without extending the interface"
    },
    {
        "Hound": "require/revert without any message",
        "IllIllI": "require()/revert() statements should have descriptive reason strings"
    },
    {
        "Hound": "Missing events in sensitive functions",
        "IllIllI": "Missing event and or timelock for critical parameter change"
    },
    {
        "Hound": "Same constant is redefined elsewhere",
        "IllIllI": "Constant redefined elsewhere"
    },
    {
        "Hound": "Lines are too long",
        "IllIllI": "Lines are too long"
    },
    {
        "Hound": "Uppercase non constant/immutable variables",
        "IllIllI": "Variable names that consist of all capital letters should be reserved for constant/immutable variables"
    },
    {
        "Hound": "Typos in comments",
        "IllIllI": "Typos"
    },
    {
        "Hound": "Missing NatSpec",
        "IllIllI": "File is missing NatSpec"
    },
    {
        "Hound": "Missing NatSpec @param",
        "IllIllI": "NatSpec @param is missing"
    },
    {
        "Hound": "Incomplete NatSpec @return",
        "IllIllI": "NatSpec @return argument is missing"
    },
    {
        "Hound": "Function visibility order does not comply with best practices",
        "IllIllI": "Function ordering does not follow the Solidity style guide"
    },
    {
        "Hound": "Layout order does not comply with best practices",
        "IllIllI": "Contract does not follow the Solidity style guide's suggested layout ordering"
    },
    {
        "Hound": "Interfaces should have an I prefix in the contract name",
        "IllIllI": "Interfaces should be indicated with an I prefix in the contract name"
    },
    {
        "IllIllI": "Control structures do not follow the Solidity Style Guide"
    },
    {
        "Hound": "Use of constant variables instead of immutable",
        "IllIllI": "Expressions for constant values such as a call to keccak256(), should use immutable rather than constant"
    },
    {
        "Hound": "Time related variables should use time units instead of numbers",
        "IllIllI": "Numeric values having to do with time should use time units for readability"
    },
    {
        "Hound": "Consider using delete instead of assigning zero/false to clear values",
        "IllIllI": "Consider using delete rather than assigning zero/false to clear values"
    },
    {
        "Hound": "Contracts should have full test coverage",
        "IllIllI": "Contracts should have full test coverage"
    },
    {
        "Hound": "Large or complicated code bases should implement invariant tests",
        "IllIllI": "Large or complicated code bases should implement invariant tests"
    },
    {
        "Hound": "Hardcoded address should be avoided",
        "IllIllI": "addresss shouldn't be hard-coded"
    },
    {
        "Hound": "Parameter omission in events",
        "IllIllI": "Events that mark critical parameter changes should contain both the old and the new value"
    },
    {
        "Hound": "Use @inheritdoc rather than using a non-standard annotation",
        "IllIllI": "Use @inheritdoc rather than using a non-standard annotation"
    },
    {
        "Hound": "Inconsistent spacing in comments",
        "IllIllI": "Inconsistent spacing in comments"
    },
    {
        "Hound": "Use of floating pragma",
        "IllIllI": "Non-library/interface files should use fixed compiler versions, not floating ones"
    },
    {
        "Hound": "Some variables have a implicit default visibility",
        "IllIllI": "Visibility should be set explicitly rather than defaulting to internal"
    },
    {
        "Hound": "mapping definitions does not comply with best practices",
        "IllIllI": "mapping definitions do not follow the Solidity Style Guide"
    },
    {
        "Hound": "Array lengths not checked",
        "IllIllI": "Array lengths not checked"
    },
    {
        "Hound": "Use of ownership with a single step rather than double",
        "IllIllI": "Use Ownable2Step rather than Ownable"
    },
    {
        "Hound": "Upgradeable contract is missing a gap storage variable",
        "IllIllI": "Upgradeable contract is missing a __gap[50] storage variable to allow for new storage variables in later versions"
    },
    {
        "Hound": "Loss of precision on division",
        "IllIllI": "Loss of precision"
    },
    {
        "Hound": "Solidity version 0.8.20 may not work on other chains due to PUSH0",
        "IllIllI": "Solidity version 0.8.20 may not work on other chains due to PUSH0"
    },
    {
        "Hound": "Usage of functions that are not part of the IERC20 interface",
        "IllIllI": "decimals() is not a part of the ERC-20 standard"
    },
    {
        "Hound": "Missing checks for address(0)",
        "IllIllI": "Missing checks for address(0x0) when assigning values to address state variables"
    },
    {
        "Hound": "Some functions do not work correctly with fee-on-transfer tokens",
        "IllIllI": "Contracts are vulnerable to fee-on-transfer accounting-related issues"
    },
    {
        "Hound": "Missing staleness checks for Chainlink oracle",
        "IllIllI": "Insufficient oracle validation"
    },
    {
        "Hound": "Missing L2 sequencer checks for Chainlink oracle",
        "IllIllI": "Missing checks for whether the L2 Sequencer is active"
    },
    {
        "Hound": "Centralization issue caused by admin privileges",
        "IllIllI": "The owner is a single point of failure and a centralization risk"
    },
    {
        "Hound": "Some functions do not work correctly with rebasing tokens",
        "IllIllI": "Contracts are vulnerable to rebasing accounting-related issues"
    },
    {
        "Hound": "Some ERC20 can revert on a zero value transfer",
        "IllIllI": "Some tokens may revert when zero value transfers are made"
    },
    {
        "Hound": "Non-compliant IERC20 tokens may revert with transfer",
        "IllIllI": "Unsafe use of transfer()/transferFrom() with IERC20"
    },
    {
        "Hound": "Return values of transfer/transferFrom not checked",
        "IllIllI": "Return values of transfer()/transferFrom() not checked"
    },
    {
        "Hound": "Reduce gas usage by moving to Solidity 0.8.19 or later",
        "IllIllI": "Use at least Solidity version 0.8.19 to gain some gas boost"
    },
    {
        "Hound": "Avoid updating storage when the value hasn't changed",
        "IllIllI": "Avoid updating storage when the value hasn't changed"
    },
    {
        "Hound": "Multiple mappings that share an ID can be combined into a single mapping of ID / struct",
        "IllIllI": "Multiple address/ID mappings can be combined into a single mapping of an address/ID to a struct, where appropriate"
    },
    {
        "Hound": "State variables only set in the constructor should be declared `immutable`",
        "IllIllI": "State variables only set in the constructor should be declared immutable"
    },
    {
        "Hound": "Use of memory instead of storage for struct/array state variables",
        "IllIllI": "Using storage instead of memory for structs/arrays saves gas"
    },
    {
        "Hound": "Cache state variables with stack variables",
        "IllIllI": "State variables should be cached in stack variables rather than re-reading them from storage"
    },
    {
        "Hound": "Cache multiple accesses of a mapping/array",
        "IllIllI": "Multiple accesses of a mapping/array should use a local variable cache"
    },
    {
        "Hound": "`x += y` is more expensive than `x = x + y` for state variables",
        "IllIllI": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables"
    },
    {
        "Hound": "internal functions only called once can be inlined to save gas",
        "IllIllI": "internal functions only called once can be inlined to save gas"
    },
    {
        "Hound": "Add unchecked blocks for subtractions where the operands cannot underflow",
        "IllIllI": "Add unchecked {} for subtractions where the operands cannot underflow because of a previous require() or if-statement"
    },
    {
        "Hound": "Array length is not cached",
        "IllIllI": "<array>.length should not be looked up in every loop of a for-loop"
    },
    {
        "Hound": "Lack of `unchecked` in loops",
        "IllIllI": "++i/i++ should be unchecked{++i}/unchecked{i++} when it is not possible for them to overflow, as is the case when used in for- and while-loops"
    },
    {
        "Hound": "Long revert strings",
        "IllIllI": "require()/revert() strings longer than 32 bytes cost extra gas"
    },
    {
        "Hound": "Cache `keccak256` with static arguments",
        "IllIllI": "keccak256() should only need to be called on a specific string literal once"
    },
    {
        "Hound": "Function names can be optimized",
        "IllIllI": "Optimize names to save gas"
    },
    {
        "Hound": "Using bool for storage incurs overhead",
        "IllIllI": "Using bools for storage incurs overhead"
    },
    {
        "Hound": "Old Solidity version",
        "IllIllI": "Use a more recent version of solidity"
    },
    {
        "Hound": "uint comparison with zero can be cheaper",
        "IllIllI": "Using > 0 costs more gas than != 0 when used on a uint in a require() statement"
    },
    {
        "Hound": ">=/<= costs less gas than >/<",
        "IllIllI": ">= costs less gas than >"
    },
    {
        "Hound": "Using pre instead of post increments/decrements",
        "IllIllI": "++i costs less gas than i++, especially when it's used in for-loops (--i/i-- too)"
    },
    {
        "Hound": "Splitting `require` statements that use `&&` saves gas",
        "IllIllI": "Splitting require() statements that use && saves gas"
    },
    {
        "Hound": "Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead",
        "IllIllI": "Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead"
    },
    {
        "Hound": "Using `private` for constants saves gas",
        "IllIllI": "Using private rather than public for constants, saves gas"
    },
    {
        "Hound": "Boolean comparison with boolean literals is unnecessary",
        "IllIllI": "Don't compare boolean expressions to boolean literals"
    },
    {
        "Hound": "`SafeMath` usage with Solidity version >`0.8.0`",
        "IllIllI": "Don't use SafeMath once the solidity version is 0.8.0 or greater"
    },
    {
        "IllIllI": "require() or revert() statements that check input arguments should be at the top of the function"
    },
    {
        "Hound": "Empty blocks should be removed or emit something",
        "IllIllI": "Empty blocks should be removed or emit something"
    },
    {
        "Hound": "Redundant `event` fields can be removed",
        "IllIllI": "Superfluous event fields"
    },
    {
        "Hound": "Use custom `error`s instead of `require`/`assert`",
        "IllIllI": "Use custom errors rather than revert()/require() strings to save gas"
    },
    {
        "Hound": "Functions that revert when called by normal users can be `payable`",
        "IllIllI": "Functions guaranteed to revert when called by normal users can be marked payable"
    },
    {
        "Hound": "Constructors can be marked `payable`",
        "IllIllI": "Constructors can be marked payable"
    },
    {
        "Hound": "Avoid using `_msgSender` if not supporting `EIP-2771`",
        "IllIllI": "Don't use _msgSender() if not supporting EIP-2771"
    },
    {
        "Hound": "Unused named return variables without optimizer waste gas",
        "IllIllI": "Not using the named return variables anywhere in the function is confusing"
    }
]