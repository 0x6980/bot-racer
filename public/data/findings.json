[
    {
        "Hound": "Event is missing msg.sender parameter",
        "IllIllI-bot": "Events are missing sender information",
        "znBotty": "Event is missing parameters"
    },
    {
        "Hound": "Variable initialization with default value",
        "IllIllI-bot": "Variables need not be initialized to zero"
    },
    {
        "Hound": "Use named mappings to improve code readability",
        "IllIllI-bot": "Consider using named mappings"
    },
    {
        "Hound": "Some functions don't follow the Solidity naming conventions",
        "IllIllI-bot": "Non-external/public variable and function names should begin with an underscore"
    },
    {
        "Hound": "Missing/malformed underscores for large numeric literals",
        "IllIllI-bot": "Large numeric literals should use underscores for readability",
        "znBotty": "Use Underscores for Number Literals"
    },
    {
        "Hound": "Constants in comparisons should appear on the left side",
        "IllIllI-bot": "Constants in comparisons should appear on the left side"
    },
    {
        "Hound": "Consider disabling renounceOwnership",
        "IllIllI-bot": "Consider disabling renounceOwnership()"
    },
    {
        "Hound": "else block is not required",
        "IllIllI-bot": "else-block not required"
    },
    {
        "Hound": "Declare interfaces on separate files",
        "IllIllI-bot": "Interfaces should be defined in separate files from their usage",
        "znBotty": "Declare interfaces on separate files"
    },
    {
        "Hound": "Imports should be organized more systematically",
        "IllIllI-bot": "Imports could be organized more systematically",
        "znBotty": "Imports can be grouped together"
    },
    {
        "Hound": "Mixed usage of int/uint with int256/uint256",
        "IllIllI-bot": "Mixed usage of int/uint with int256/uint256"
    },
    {
        "Hound": "Public functions not called internally",
        "IllIllI-bot": "public functions not called by the contract should be declared external instead",
        "znBotty": "Public Functions Not Called By The Contract Should Be Declared External Instead"
    },
    {
        "Hound": "Use of non-named numeric constants",
        "IllIllI-bot": "constants should be defined rather than using magic numbers",
        "znBotty": "Constants Should Be Defined Rather Than Using Magic Numbers"
    },
    {
        "Hound": "Event does not have proper indexed fields",
        "IllIllI-bot": "Event is not properly indexed",
        "znBotty": "Event Is Missing Indexed Fields"
    },
    {
        "Hound": "Duplicated require/if statements should be refactored",
        "IllIllI-bot": "Duplicated require()/revert() checks should be refactored to a modifier or function",
        "znBotty": "Duplicated require()/revert() Checks Should Be Refactored To A Modifier Or Function"
    },
    {
        "Hound": "Lack of specific import identifier",
        "IllIllI-bot": "Import declarations should import specific identifiers, rather than the whole file",
        "znBotty": "Non-usage of specific imports"
    },
    {
        "IllIllI-bot": "Contract implements interface without extending the interface"
    },
    {
        "Hound": "require/revert without any message",
        "IllIllI-bot": "require()/revert() statements should have descriptive reason strings"
    },
    {
        "Hound": "Missing events in sensitive functions",
        "IllIllI-bot": "Missing event and or timelock for critical parameter change",
        "znBotty": "Add a timelock to critical functions"
    },
    {
        "Hound": "Same constant is redefined elsewhere",
        "IllIllI-bot": "Constant redefined elsewhere"
    },
    {
        "Hound": "Lines are too long",
        "IllIllI-bot": "Lines are too long",
        "znBotty": "Lines are too long"
    },
    {
        "Hound": "Uppercase non constant/immutable variables",
        "IllIllI-bot": "Variable names that consist of all capital letters should be reserved for constant/immutable variables"
    },
    {
        "Hound": "Typos in comments",
        "IllIllI-bot": "Typos"
    },
    {
        "Hound": "Missing NatSpec",
        "IllIllI-bot": "File is missing NatSpec"
    },
    {
        "Hound": "Missing NatSpec @param",
        "IllIllI-bot": "NatSpec @param is missing"
    },
    {
        "Hound": "Incomplete NatSpec @return",
        "IllIllI-bot": "NatSpec @return argument is missing",
        "znBotty": "NatSpec return parameters should be included in contracts"
    },
    {
        "Hound": "Function visibility order does not comply with best practices",
        "IllIllI-bot": "Function ordering does not follow the Solidity style guide",
        "znBotty": "Function writing that does not comply with the Solidity Style Guide"
    },
    {
        "Hound": "Layout order does not comply with best practices",
        "IllIllI-bot": "Contract does not follow the Solidity style guide's suggested layout ordering"
    },
    {
        "Hound": "Interfaces should have an I prefix in the contract name",
        "IllIllI-bot": "Interfaces should be indicated with an I prefix in the contract name"
    },
    {
        "IllIllI-bot": "Control structures do not follow the Solidity Style Guide"
    },
    {
        "Hound": "Use of constant variables instead of immutable",
        "IllIllI-bot": "Expressions for constant values such as a call to keccak256(), should use immutable rather than constant"
    },
    {
        "Hound": "Time related variables should use time units instead of numbers",
        "IllIllI-bot": "Numeric values having to do with time should use time units for readability"
    },
    {
        "Hound": "Consider using delete instead of assigning zero/false to clear values",
        "IllIllI-bot": "Consider using delete rather than assigning zero/false to clear values"
    },
    {
        "Hound": "Contracts should have full test coverage",
        "IllIllI-bot": "Contracts should have full test coverage"
    },
    {
        "Hound": "Large or complicated code bases should implement invariant tests",
        "IllIllI-bot": "Large or complicated code bases should implement invariant tests",
        "znBotty": "Large or complicated code bases should implement fuzzing tests"
    },
    {
        "Hound": "Hardcoded address should be avoided",
        "IllIllI-bot": "addresss shouldn't be hard-coded"
    },
    {
        "Hound": "Parameter omission in events",
        "IllIllI-bot": "Events that mark critical parameter changes should contain both the old and the new value"
    },
    {
        "Hound": "Use @inheritdoc rather than using a non-standard annotation",
        "IllIllI-bot": "Use @inheritdoc rather than using a non-standard annotation"
    },
    {
        "Hound": "Inconsistent spacing in comments",
        "IllIllI-bot": "Inconsistent spacing in comments"
    },
    {
        "Hound": "Use of floating pragma",
        "IllIllI-bot": "Non-library/interface files should use fixed compiler versions, not floating ones",
        "znBotty": "Avoid Floating Pragmas: The Version Should Be Locked"
    },
    {
        "Hound": "Some variables have a implicit default visibility",
        "IllIllI-bot": "Visibility should be set explicitly rather than defaulting to internal"
    },
    {
        "Hound": "mapping definitions does not comply with best practices",
        "IllIllI-bot": "mapping definitions do not follow the Solidity Style Guide"
    },
    {
        "Hound": "Array lengths not checked",
        "IllIllI-bot": "Array lengths not checked"
    },
    {
        "Hound": "Use of ownership with a single step rather than double",
        "IllIllI-bot": "Use Ownable2Step rather than Ownable",
        "znBotty": "TransferOwnership Should Be Two Step"
    },
    {
        "Hound": "Upgradeable contract is missing a gap storage variable",
        "IllIllI-bot": "Upgradeable contract is missing a __gap[50] storage variable to allow for new storage variables in later versions"
    },
    {
        "Hound": "Loss of precision on division",
        "IllIllI-bot": "Loss of precision",
        "znBotty": "Possible rounding issue"
    },
    {
        "Hound": "Solidity version 0.8.20 may not work on other chains due to PUSH0",
        "IllIllI-bot": "Solidity version 0.8.20 may not work on other chains due to PUSH0"
    },
    {
        "Hound": "Usage of functions that are not part of the IERC20 interface",
        "IllIllI-bot": "decimals() is not a part of the ERC-20 standard"
    },
    {
        "Hound": "Missing checks for address(0)",
        "IllIllI-bot": "Missing checks for address(0x0) when assigning values to address state variables",
        "znBotty": "Missing Checks for Address(0x0)"
    },
    {
        "Hound": "Some functions do not work correctly with fee-on-transfer tokens",
        "IllIllI-bot": "Contracts are vulnerable to fee-on-transfer accounting-related issues"
    },
    {
        "Hound": "Missing staleness checks for Chainlink oracle",
        "IllIllI-bot": "Insufficient oracle validation"
    },
    {
        "Hound": "Missing L2 sequencer checks for Chainlink oracle",
        "IllIllI-bot": "Missing checks for whether the L2 Sequencer is active"
    },
    {
        "Hound": "Centralization issue caused by admin privileges",
        "IllIllI-bot": "The owner is a single point of failure and a centralization risk",
        "znBotty": "Admin privilege - A single point of failure can allow a hacked or malicious owner use critical functions in the project"
    },
    {
        "Hound": "Some functions do not work correctly with rebasing tokens",
        "IllIllI-bot": "Contracts are vulnerable to rebasing accounting-related issues"
    },
    {
        "Hound": "Some ERC20 can revert on a zero value transfer",
        "IllIllI-bot": "Some tokens may revert when zero value transfers are made"
    },
    {
        "Hound": "Non-compliant IERC20 tokens may revert with transfer",
        "IllIllI-bot": "Unsafe use of transfer()/transferFrom() with IERC20"
    },
    {
        "Hound": "Return values of transfer/transferFrom not checked",
        "IllIllI-bot": "Return values of transfer()/transferFrom() not checked"
    },
    {
        "Hound": "Reduce gas usage by moving to Solidity 0.8.19 or later",
        "IllIllI-bot": "Use at least Solidity version 0.8.19 to gain some gas boost",
        "znBotty": "Use solidity version 0.8.19 to gain some gas boost"
    },
    {
        "Hound": "Avoid updating storage when the value hasn't changed",
        "IllIllI-bot": "Avoid updating storage when the value hasn't changed"
    },
    {
        "Hound": "Multiple mappings that share an ID can be combined into a single mapping of ID / struct",
        "IllIllI-bot": "Multiple address/ID mappings can be combined into a single mapping of an address/ID to a struct, where appropriate"
    },
    {
        "Hound": "State variables only set in the constructor should be declared immutable",
        "IllIllI-bot": "State variables only set in the constructor should be declared immutable"
    },
    {
        "Hound": "Use of memory instead of storage for struct/array state variables",
        "IllIllI-bot": "Using storage instead of memory for structs/arrays saves gas"
    },
    {
        "Hound": "Cache state variables with stack variables",
        "IllIllI-bot": "State variables should be cached in stack variables rather than re-reading them from storage"
    },
    {
        "Hound": "Cache multiple accesses of a mapping/array",
        "IllIllI-bot": "Multiple accesses of a mapping/array should use a local variable cache"
    },
    {
        "Hound": "x += y is more expensive than x = x + y for state variables",
        "IllIllI-bot": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables",
        "znBotty": "<x> += <y> Costs More Gas Than <x> = <x> + <y> For State Variables"
    },
    {
        "Hound": "internal/private functions only called once can be inlined to save gas",
        "IllIllI-bot": "internal functions only called once can be inlined to save gas",
        "znBotty": "internal functions only called once can be inlined to save gas"
    },
    {
        "Hound": "Add unchecked blocks for subtractions where the operands cannot underflow",
        "IllIllI-bot": "Add unchecked {} for subtractions where the operands cannot underflow because of a previous require() or if-statement",
        "znBotty": "Using unchecked blocks to save gas"
    },
    {
        "Hound": "Array length is not cached",
        "IllIllI-bot": "<array>.length should not be looked up in every loop of a for-loop",
        "znBotty": "<array>.length Should Not Be Looked Up In Every Loop Of A For-loop"
    },
    {
        "Hound": "Lack of unchecked in loops",
        "IllIllI-bot": "++i/i++ should be unchecked{++i}/unchecked{i++} when it is not possible for them to overflow, as is the case when used in for- and while-loops",
        "znBotty": "++i/i++ Should Be unchecked{++i}/unchecked{i++} When It Is Not Possible For Them To Overflow, As Is The Case When Used In For- And While-loops"
    },
    {
        "Hound": "Long revert strings",
        "IllIllI-bot": "require()/revert() strings longer than 32 bytes cost extra gas"
    },
    {
        "Hound": "Cache keccak256 with static arguments",
        "IllIllI-bot": "keccak256() should only need to be called on a specific string literal once"
    },
    {
        "Hound": "Function names can be optimized",
        "IllIllI-bot": "Optimize names to save gas",
        "znBotty": "Optimize names to save gas"
    },
    {
        "Hound": "Using bool for storage incurs overhead",
        "IllIllI-bot": "Using bools for storage incurs overhead"
    },
    {
        "Hound": "Old Solidity version",
        "IllIllI-bot": "Use a more recent version of solidity",
        "znBotty": "Use a more recent version of Solidity"
    },
    {
        "Hound": "uint comparison with zero can be cheaper",
        "IllIllI-bot": "Using > 0 costs more gas than != 0 when used on a uint in a require() statement"
    },
    {
        "Hound": ">=/<= costs less gas than >/<",
        "IllIllI-bot": ">= costs less gas than >"
    },
    {
        "Hound": "Using pre instead of post increments/decrements",
        "IllIllI-bot": "++i costs less gas than i++, especially when it's used in for-loops (--i/i-- too)",
        "znBotty": "++i Costs Less Gas Than i++, Especially When It’s Used In For-loops (--i/i-- Too)"
    },
    {
        "Hound": "Splitting require statements that use && saves gas",
        "IllIllI-bot": "Splitting require() statements that use && saves gas",
        "znBotty": "Splitting require() Statements That Use && Saves Gas"
    },
    {
        "Hound": "Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead",
        "IllIllI-bot": "Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead",
        "znBotty": "Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead"
    },
    {
        "Hound": "Using private for constants saves gas",
        "IllIllI-bot": "Using private rather than public for constants, saves gas",
        "znBotty": "Using private rather than public for constants, saves gas"
    },
    {
        "Hound": "Boolean comparison with boolean literals is unnecessary",
        "IllIllI-bot": "Don't compare boolean expressions to boolean literals"
    },
    {
        "Hound": "SafeMath usage with Solidity version >0.8.0",
        "IllIllI-bot": "Don't use SafeMath once the solidity version is 0.8.0 or greater"
    },
    {
        "IllIllI-bot": "require() or revert() statements that check input arguments should be at the top of the function"
    },
    {
        "Hound": "Empty blocks should be removed or emit something",
        "IllIllI-bot": "Empty blocks should be removed or emit something",
        "znBotty": "Empty blocks should be removed or emit something"
    },
    {
        "Hound": "Redundant event fields can be removed",
        "IllIllI-bot": "Superfluous event fields"
    },
    {
        "Hound": "Use custom errors instead of require/assert",
        "IllIllI-bot": "Use custom errors rather than revert()/require() strings to save gas",
        "znBotty": "Use of Custom Errors Instead of String"
    },
    {
        "Hound": "Functions that revert when called by normal users can be payable",
        "IllIllI-bot": "Functions guaranteed to revert when called by normal users can be marked payable",
        "znBotty": "Functions guaranteed to revert when called by normal users can be marked payable"
    },
    {
        "Hound": "Constructors can be marked payable",
        "IllIllI-bot": "Constructors can be marked payable",
        "znBotty": "Setting the constructor to payable"
    },
    {
        "Hound": "Avoid using _msgSender if not supporting EIP-2771",
        "IllIllI-bot": "Don't use _msgSender() if not supporting EIP-2771"
    },
    {
        "Hound": "Unused named return variables without optimizer waste gas",
        "IllIllI-bot": "Not using the named return variables anywhere in the function is confusing"
    },
    {
        "IllIllI-bot": "Use Ownable2Step's transfer function rather than Ownable's for transfers of ownership",
        "znBotty": "Use safeTransferOwnership instead of transferOwnership function"
    },
    {
        "Hound": "Unsafe downcast may overflow",
        "IllIllI-bot": "Unsafe downcast"
    },
    {
        "Hound": "Upgradeable contract is not initialized",
        "IllIllI-bot": "Upgradeable contract not initialized",
        "znBotty": "Implementation contract may not be initialized"
    },
    {
        "Hound": "Use of abi.encodePacked with dynamic types inside keccak256",
        "IllIllI-bot": "abi.encodePacked() should not be used with dynamic types when passing the result to a hash function such as keccak256()"
    },
    {
        "Hound": "Missing initializer modifier",
        "IllIllI-bot": "Missing initializer modifier on constructor"
    },
    {
        "Hound": "Files not imported in any source code",
        "IllIllI-bot": "Unused file"
    },
    {
        "Hound": "Possible reentrancy in modifiers placed before nonReentrant",
        "IllIllI-bot": "The nonReentrant modifier should occur before all other modifiers"
    },
    {
        "Hound": "Unused named return",
        "IllIllI-bot": "Adding a return statement when the function defines a named return variable, is redundant"
    },
    {
        "Hound": "Some casts are more restrictive than the type assigned to the variable",
        "IllIllI-bot": "Cast is more restrictive than the type of the variable being assigned"
    },
    {
        "Hound": "Misplaced SPDX identifier",
        "IllIllI-bot": "Misplaced SPDX identifier"
    },
    {
        "Hound": "Event does not have proper indexed fields",
        "IllIllI-bot": "Event is missing indexed fields"
    },
    {
        "Hound": "Consider using delete instead of assigning zero/false to clear values",
        "IllIllI-bot": "Consider using delete rather than assigning zero to clear values"
    },
    {
        "Hound": "Avoid the use of sensitive terms",
        "IllIllI-bot": "Avoid the use of sensitive terms"
    },
    {
        "Hound": "Multiplication/division by two should use bit shifting",
        "IllIllI-bot": "Division by two should use bit shifting",
        "znBotty": "Multiplication/division By Two Should Use Bit Shifting"
    },
    {
        "Hound": "Use assembly to write address storage values",
        "znBotty": "Use assembly to write address storage values"
    },
    {
        "znBotty": "It Costs More Gas To Initialize Variables To Zero Than To Let The Default Of Zero Be Applied"
    },
    {
        "Hound": "Structs can be modified to fit in fewer storage slots",
        "znBotty": "Structs can be packed into fewer storage slots by editing time variables"
    },
    {
        "Hound": "State variables can be packed into fewer storage slots",
        "znBotty": "State variables can be packed into fewer storage slots"
    },
    {
        "Hound": "Use of ecrecover is susceptible to signature malleability",
        "IllIllI-bot": "Missing checks for ecrecover() signature malleability",
        "znBotty": "Use of ecrecover is susceptible to signature malleability"
    },
    {
        "Hound": "Low level calls with Solidity before 0.8.14 result in an optimiser bug",
        "IllIllI-bot": "File allows a version of solidity that is susceptible to an assembly optimizer bug",
        "znBotty": "Low Level Calls With Solidity Version 0.8.14 Can Result In Optimiser Bug"
    },
    {
        "Hound": "It's possible to mint to address(0)",
        "znBotty": "Minting tokens to the zero address should be avoided"
    },
    {
        "Hound": "Possible division by 0 is not prevented",
        "IllIllI-bot": "Division by zero not prevented",
        "znBotty": "Prevent division by 0"
    },
    {
        "Hound": "Use of transfer instead of safeTransfer",
        "znBotty": "Use safetransfer Instead Of transfer"
    },
    {
        "Hound": "Array lacks use of the pop function",
        "znBotty": "Unbounded loop"
    },
    {
        "Hound": "Unresolved TODOs in comments",
        "znBotty": "Open TODOs"
    },
    {
        "Hound": "require/revert without any message",
        "znBotty": "require() / revert() Statements Should Have Descriptive Reason Strings"
    },
    {
        "Hound": "Large multiples of ten should use scientific notation",
        "znBotty": "Large multiples of ten should use scientific notation"
    },
    {
        "Hound": "Use of abi.encodePacked instead of bytes.concat",
        "znBotty": "Use bytes.concat()"
    },
    {
        "Hound": "Transferred ERC721 can be stuck permanently",
        "IllIllI-bot": "Use of transferFrom() rather than safeTransferFrom() for NFTs in will lead to the loss of NFTs"
    },
    {
        "Hound": "Use of mint instead of safeMint for IERC721",
        "IllIllI-bot": "_safeMint() should be used rather than _mint() wherever possible"
    },
    {
        "Hound": "External calls in an unbounded loop can result in a DoS",
        "IllIllI-bot": "External calls in an un-bounded for-loop may result in a DOS"
    },
    {
        "Hound": "Use of exponentiation instead of scientific notation",
        "IllIllI-bot": "Use scientific notation (e.g. 1e18) rather than exponentiation (e.g. 10**18)"
    },
    {
        "Hound": "assert is deprecated and it should not be used",
        "IllIllI-bot": "require() should be used instead of assert()"
    },
    {
        "Hound": "safeApprove is deprecated",
        "IllIllI-bot": "safeApprove() is deprecated"
    },
    {
        "Hound": "Variable names don't follow the Solidity naming convention",
        "IllIllI-bot": "Variable names don't follow the Solidity style guide"
    },
    {
        "IllIllI-bot": "Events may be emitted out of order due to reentrancy"
    },
    {
        "Hound": "Use a ternary statement instead of if/else when appropriate",
        "IllIllI-bot": "if-statement can be converted to a ternary"
    },
    {
        "Hound": "2**<n> - 1 should be re-written as type(uint<n>).max",
        "IllIllI-bot": "2**<n> - 1 should be re-written as type(uint<n>).max"
    },
    {
        "Hound": "internal functions not called by the contract should be removed",
        "IllIllI-bot": "internal functions not called by the contract should be removed"
    },
    {
        "Hound": "Structs can be packed into fewer storage slots",
        "IllIllI-bot": "Structs can be packed into fewer storage slots"
    },
    {
        "IllIllI-bot": "The result of function calls should be cached rather than re-calling the function"
    },
    {
        "Hound": "internal functions not called by the contract should be removed to save deployment gas",
        "IllIllI-bot": "internal functions not called by the contract should be removed to save deployment gas"
    },
    {
        "IllIllI-bot": "Stack variable used as a cheaper cache for a state variable is only used once"
    },
    {
        "Hound": "Fee-on-transfer/rebasing tokens will have problems when swapping",
        "IllIllI-bot": "Fee-on-transfer/rebasing tokens will have problems when swapping"
    },
    {
        "Hound": "Using a vulnerable dependency from some libraries",
        "IllIllI-bot": "Vulnerable versions of packages are being used"
    },
    {
        "Hound": "Some functions don't follow the Solidity naming conventions",
        "IllIllI-bot": "Non-external variable and function names should begin with an underscore"
    },
    {
        "Hound": "Unused arguments in overrided functions",
        "IllIllI-bot": "override function arguments that are unused should have the variable name removed or commented out to avoid compiler warnings"
    },
    {
        "Hound": "transfer/send instead of call may fail in some scenarios",
        "IllIllI-bot": "Don't use payable.transfer()/payable.send()"
    },
    {
        "Hound": "Owner can renounce ownership while system is paused",
        "IllIllI-bot": "Owner can renounce while system is paused"
    },
    {
        "Hound": "Use an already existing `MerkleProof` implementation",
        "IllIllI-bot": "Use OpenZeppelin's MerkleProof rather than rolling your own"
    },
    {
        "Hound": "Use of abi.encodeWithSignature/abi.encodeWithSelector instead of abi.encodeCall",
        "IllIllI-bot": "Use abi.encodeCall() instead of abi.encodeSignature()/abi.encodeSelector()"
    },
    {
        "Hound": "Custom error without details",
        "IllIllI-bot": "Custom error has no error details"
    },
    {
        "Hound": "Long functions should be refactored into multiple functions",
        "IllIllI-bot": "Long functions should be refactored into multiple, smaller, functions"
    },
    {
        "IllIllI-bot": "Unsafe conversion from unsigned to signed values"
    },
    {
        "Hound": "Non-assembly method available",
        "IllIllI-bot": "Non-assembly method available"
    },
    {
        "IllIllI-bot": "Constructor visibility is ignored"
    },
    {
        "Hound": "Use a more recent version of Solidity",
        "IllIllI-bot": "Use a more recent version of solidity"
    },
    {
        "Hound": "Using a minimum pragma without an upper bound is dangerous",
        "IllIllI-bot": "Using >/>= without specifying an upper bound is unsafe"
    },
    {
        "IllIllI-bot": "Inverting the condition of an if-else-statement wastes gas"
    },
    {
        "Hound": "Initializers could be front-run",
        "IllIllI-bot": "Initialization can be front-run"
    },
    {
        "Hound": "Some inherited contracts are redundant",
        "IllIllI-bot": "Redundant inheritance specifier"
    },
    {
        "Hound": "Unused struct definition",
        "IllIllI-bot": "Unused struct definition"
    },
    {
        "Hound": "Use of abi.encodePacked instead of casting directly",
        "IllIllI-bot": "Cast to bytes or bytes32 for clearer semantic meaning"
    },
    {
        "Hound": "Use of abi.encodePacked instead of bytes.concat",
        "IllIllI-bot": "Use bytes.concat() on bytes instead of abi.encodePacked() for clearer semantic meaning"
    },
    {
        "IllIllI-bot": "Unusual loop variable"
    },
    {
        "Hound": "Return values of approve not checked",
        "IllIllI-bot": "Return values of approve() not checked"
    },
    {
        "Hound": "Strings should use double quotes rather than single quotes",
        "IllIllI-bot": "Strings should use double quotes rather than single quotes"
    },
    {
        "Hound": "Remove or replace unused state variables",
        "IllIllI-bot": "Remove or replace unused state variables"
    },
    {
        "Hound": "approve can revert if the current approval is not zero",
        "IllIllI-bot": "approve()/safeApprove() may revert if the current approval is not zero"
    },
    {
        "Hound": "image_data should be used for raw svg",
        "IllIllI-bot": "image_data should be used for raw svg"
    },
    {
        "Hound": "tokenURI does not follow EIP-721",
        "IllIllI-bot": "tokenURI() does not follow EIP-721"
    },
    {
        "Hound": "No access control on receive/payable fallback",
        "IllIllI-bot": "Empty receive()/payable fallback() function does not authorize requests"
    },
    {
        "Hound": "Contracts with only utility functions should be libraries",
        "IllIllI-bot": "Contracts containing only utility functions should be made into libraries"
    },
    {
        "Hound": "Use EIP-5627 to describe EIP-712 domains",
        "IllIllI-bot": "Consider implementing EIP-5267 to securely describe EIP-712 domains being used"
    },
    {
        "Hound": "Inconsistent method of specifying a floating pragma",
        "IllIllI-bot": "Inconsistent method of specifying a floating pragma"
    },
    {
        "Hound": "Avoid contract existence checks by using low level calls",
        "IllIllI-bot": "Avoid contract existence checks by using low level calls"
    },
    {
        "Hound": "User funds sent in excess are not refunded",
        "IllIllI-bot": "Excess funds sent via msg.value not refunded"
    },
    {
        "Hound": "Avoid the use of deprecated Chainlink functions",
        "IllIllI-bot": "latestAnswer() is deprecated"
    }
]